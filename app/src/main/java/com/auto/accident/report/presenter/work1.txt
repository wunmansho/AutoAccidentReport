//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.5.2.
//
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.mydamp.accidents.professional.presenter;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import com.mydamp.accidents.professional.R;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.builder.PostActivityStarter;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class PDFViewActivity_
    extends PDFViewActivity
    implements HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(R.layout.pdf_view_activity);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T) this.findViewById(id));
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        PDFViewActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((PDFViewActivity_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance!= null) {
            uri = nonConfigurationInstance.uri;
            pageNumber = nonConfigurationInstance.pageNumber;
        }

    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static PDFViewActivity_.IntentBuilder_ intent(Context context) {
        return new PDFViewActivity_.IntentBuilder_(context);
    }

    public static PDFViewActivity_.IntentBuilder_ intent(Fragment supportFragment) {
        return new PDFViewActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.pdfView = hasViews.internalFindViewById(R.id.pdfView);
        this.my_toolbar = hasViews.internalFindViewById(R.id.my_toolbar);
        this.btnRight = hasViews.internalFindViewById(R.id.btnRight);
        this.btnLeft = hasViews.internalFindViewById(R.id.btnLeft);
        this.btnCloud = hasViews.internalFindViewById(R.id.btnCloud);
        this.btnHelp = hasViews.internalFindViewById(R.id.btnHelp);
        this.btnShare = hasViews.internalFindViewById(R.id.btnShare);
        this.tvPage = hasViews.internalFindViewById(R.id.tvPage);
        this.ll01 = hasViews.internalFindViewById(R.id.ll01);
        this.noData = hasViews.internalFindViewById(R.id.noData);
        afterViews();
    }

    @Override
    public Object getLastCustomNonConfigurationInstance() {
        PDFViewActivity_.NonConfigurationInstancesHolder nonConfigurationInstance = ((PDFViewActivity_.NonConfigurationInstancesHolder) super.getLastCustomNonConfigurationInstance());
        if (nonConfigurationInstance == null) {
            return null;
        }
        return nonConfigurationInstance.superNonConfigurationInstance;
    }

    @Override
    public PDFViewActivity_.NonConfigurationInstancesHolder onRetainCustomNonConfigurationInstance() {
        PDFViewActivity_.NonConfigurationInstancesHolder nonConfigurationInstanceState_ = new PDFViewActivity_.NonConfigurationInstancesHolder();
        nonConfigurationInstanceState_.superNonConfigurationInstance = super.onRetainCustomNonConfigurationInstance();
        nonConfigurationInstanceState_.uri = uri;
        nonConfigurationInstanceState_.pageNumber = pageNumber;
        return nonConfigurationInstanceState_;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.pdf_viewer_options, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case  42 :
            {
                PDFViewActivity_.this.onResult(resultCode, data);
                break;
            }
        }
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<PDFViewActivity_.IntentBuilder_>
    {
        private Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, PDFViewActivity_.class);
        }

        public IntentBuilder_(Fragment fragment) {
            super(fragment.getActivity(), PDFViewActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public PostActivityStarter startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (context instanceof Activity) {
                    Activity activity = ((Activity) context);
                    ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                } else {
                    context.startActivity(intent);
                }
            }
            return new PostActivityStarter(context);
        }
    }

    private static class NonConfigurationInstancesHolder {
        public Uri uri;
        public Object superNonConfigurationInstance;
        public Integer pageNumber;
    }
}
